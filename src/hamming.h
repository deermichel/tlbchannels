// hamming code calc

#ifndef HAMMING_H
#define HAMMING_H

#include <stdint.h>
#include "debug.h"
#include "packet.h"

// hamming-8,4 encoding codes
const uint8_t ENCODES[16] = {
    0x00, 0xD2, 0x55, 0x87, 0x99, 0x4B, 0xCC, 0x1E, 0xE1, 0x33, 0xB4, 0x66, 0x78, 0xAA, 0x2D, 0xFF,
};

// hamming-8,4 decoding codes
const uint8_t DECODES[256] = {
    0x00, 0x00, 0x00, 0xFF, 0x00, 0xFF, 0xFF, 0x03, 0x00, 0xFF, 0xFF, 0x05, 0xFF, 0x0E, 0x07, 0xFF, 
    0x00, 0xFF, 0xFF, 0x09, 0xFF, 0x02, 0x07, 0xFF, 0xFF, 0x04, 0x07, 0xFF, 0x07, 0xFF, 0x07, 0x07, 
    0x00, 0xFF, 0xFF, 0x09, 0xFF, 0x0E, 0x0B, 0xFF, 0xFF, 0x0E, 0x0D, 0xFF, 0x0E, 0x0E, 0xFF, 0x0E, 
    0xFF, 0x09, 0x09, 0x09, 0x0A, 0xFF, 0xFF, 0x09, 0x0C, 0xFF, 0xFF, 0x09, 0xFF, 0x0E, 0x07, 0xFF, 
    0x00, 0xFF, 0xFF, 0x05, 0xFF, 0x02, 0x0B, 0xFF, 0xFF, 0x05, 0x05, 0x05, 0x06, 0xFF, 0xFF, 0x05, 
    0xFF, 0x02, 0x01, 0xFF, 0x02, 0x02, 0xFF, 0x02, 0x0C, 0xFF, 0xFF, 0x05, 0xFF, 0x02, 0x07, 0xFF, 
    0xFF, 0x08, 0x0B, 0xFF, 0x0B, 0xFF, 0x0B, 0x0B, 0x0C, 0xFF, 0xFF, 0x05, 0xFF, 0x0E, 0x0B, 0xFF, 
    0x0C, 0xFF, 0xFF, 0x09, 0xFF, 0x02, 0x0B, 0xFF, 0x0C, 0x0C, 0x0C, 0xFF, 0x0C, 0xFF, 0xFF, 0x0F, 
    0x00, 0xFF, 0xFF, 0x03, 0xFF, 0x03, 0x03, 0x03, 0xFF, 0x04, 0x0D, 0xFF, 0x06, 0xFF, 0xFF, 0x03, 
    0xFF, 0x04, 0x01, 0xFF, 0x0A, 0xFF, 0xFF, 0x03, 0x04, 0x04, 0xFF, 0x04, 0xFF, 0x04, 0x07, 0xFF, 
    0xFF, 0x08, 0x0D, 0xFF, 0x0A, 0xFF, 0xFF, 0x03, 0x0D, 0xFF, 0x0D, 0x0D, 0xFF, 0x0E, 0x0D, 0xFF, 
    0x0A, 0xFF, 0xFF, 0x09, 0x0A, 0x0A, 0x0A, 0xFF, 0xFF, 0x04, 0x0D, 0xFF, 0x0A, 0xFF, 0xFF, 0x0F, 
    0xFF, 0x08, 0x01, 0xFF, 0x06, 0xFF, 0xFF, 0x03, 0x06, 0xFF, 0xFF, 0x05, 0x06, 0x06, 0x06, 0xFF, 
    0x01, 0xFF, 0x01, 0x01, 0xFF, 0x02, 0x01, 0xFF, 0xFF, 0x04, 0x01, 0xFF, 0x06, 0xFF, 0xFF, 0x0F, 
    0x08, 0x08, 0xFF, 0x08, 0xFF, 0x08, 0x0B, 0xFF, 0xFF, 0x08, 0x0D, 0xFF, 0x06, 0xFF, 0xFF, 0x0F, 
    0xFF, 0x08, 0x01, 0xFF, 0x0A, 0xFF, 0xFF, 0x0F, 0x0C, 0xFF, 0xFF, 0x0F, 0xFF, 0x0F, 0x0F, 0x0F, 
};

// encode packet (hamming-8,4)
void encode_8_4(packet_t *packet) {
    // print_packet(packet); // before

    for (int i = 0; i < 8; i++) {
        packet->raw[i+8] = ENCODES[packet->raw[i] & 0x0F];
        packet->raw[i] = ENCODES[packet->raw[i] >> 4];
    }

    // print_packet(packet); // after
    // printf("\n");
}

// decode packet (hamming-8,4)
int decode_8_4(packet_t *packet) {
    // print_packet(packet); // before

    uint8_t res = 0;
    for (int i = 0; i < 8; i++) {
        res = DECODES[packet->raw[i]] << 4;
        if (res == 0xFF) return 0;
        packet->raw[i] = res;

        res = DECODES[packet->raw[i+8]];
        if (res == 0xFF) return 0;
        packet->raw[i] |= res;
    }
    memset(&packet->raw[8], 0xFF, 8);

    // print_packet(packet); // after
    // printf("\n");

    return 1;
}

// void decode_8_4(uint16_t input) {
//     return DECODES[input & 0x00FF];
// }

#endif // HAMMING_H