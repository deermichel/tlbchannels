// hamming code calc

#ifndef HAMMING_H
#define HAMMING_H

#include <stdint.h>

// hamming-8,4 encoding codes
const uint8_t CODES[16] = {
    0x00, 0xD2, 0x55, 0x87, 0x99, 0x4B, 0xCC, 0x1E, 0xE1, 0x33, 0xB4, 0x66, 0x78, 0xAA, 0x2D, 0xFF,
};

// hamming-8,4 decoding codes
const uint16_t DECODES[256] = {
    0x00FF, 0x00FF, 0x00FF, 0x0000, 0x00FF, 0x0000, 0x0000, 0x03FF, 0x00FF, 0x0000, 0x0000, 0x05FF, 0x0000, 0x0EFF, 0x07FF, 0x0000, 
    0x00FF, 0x0000, 0x0000, 0x09FF, 0x0000, 0x02FF, 0x07FF, 0x0000, 0x0000, 0x04FF, 0x07FF, 0x0000, 0x07FF, 0x0000, 0x07FF, 0x07FF, 
    0x00FF, 0x0000, 0x0000, 0x09FF, 0x0000, 0x0EFF, 0x0BFF, 0x0000, 0x0000, 0x0EFF, 0x0DFF, 0x0000, 0x0EFF, 0x0EFF, 0x0000, 0x0EFF, 
    0x0000, 0x09FF, 0x09FF, 0x09FF, 0x0AFF, 0x0000, 0x0000, 0x09FF, 0x0CFF, 0x0000, 0x0000, 0x09FF, 0x0000, 0x0EFF, 0x07FF, 0x0000, 
    0x00FF, 0x0000, 0x0000, 0x05FF, 0x0000, 0x02FF, 0x0BFF, 0x0000, 0x0000, 0x05FF, 0x05FF, 0x05FF, 0x06FF, 0x0000, 0x0000, 0x05FF, 
    0x0000, 0x02FF, 0x01FF, 0x0000, 0x02FF, 0x02FF, 0x0000, 0x02FF, 0x0CFF, 0x0000, 0x0000, 0x05FF, 0x0000, 0x02FF, 0x07FF, 0x0000, 
    0x0000, 0x08FF, 0x0BFF, 0x0000, 0x0BFF, 0x0000, 0x0BFF, 0x0BFF, 0x0CFF, 0x0000, 0x0000, 0x05FF, 0x0000, 0x0EFF, 0x0BFF, 0x0000, 
    0x0CFF, 0x0000, 0x0000, 0x09FF, 0x0000, 0x02FF, 0x0BFF, 0x0000, 0x0CFF, 0x0CFF, 0x0CFF, 0x0000, 0x0CFF, 0x0000, 0x0000, 0x0FFF, 
    0x00FF, 0x0000, 0x0000, 0x03FF, 0x0000, 0x03FF, 0x03FF, 0x03FF, 0x0000, 0x04FF, 0x0DFF, 0x0000, 0x06FF, 0x0000, 0x0000, 0x03FF, 
    0x0000, 0x04FF, 0x01FF, 0x0000, 0x0AFF, 0x0000, 0x0000, 0x03FF, 0x04FF, 0x04FF, 0x0000, 0x04FF, 0x0000, 0x04FF, 0x07FF, 0x0000, 
    0x0000, 0x08FF, 0x0DFF, 0x0000, 0x0AFF, 0x0000, 0x0000, 0x03FF, 0x0DFF, 0x0000, 0x0DFF, 0x0DFF, 0x0000, 0x0EFF, 0x0DFF, 0x0000, 
    0x0AFF, 0x0000, 0x0000, 0x09FF, 0x0AFF, 0x0AFF, 0x0AFF, 0x0000, 0x0000, 0x04FF, 0x0DFF, 0x0000, 0x0AFF, 0x0000, 0x0000, 0x0FFF, 
    0x0000, 0x08FF, 0x01FF, 0x0000, 0x06FF, 0x0000, 0x0000, 0x03FF, 0x06FF, 0x0000, 0x0000, 0x05FF, 0x06FF, 0x06FF, 0x06FF, 0x0000, 
    0x01FF, 0x0000, 0x01FF, 0x01FF, 0x0000, 0x02FF, 0x01FF, 0x0000, 0x0000, 0x04FF, 0x01FF, 0x0000, 0x06FF, 0x0000, 0x0000, 0x0FFF, 
    0x08FF, 0x08FF, 0x0000, 0x08FF, 0x0000, 0x08FF, 0x0BFF, 0x0000, 0x0000, 0x08FF, 0x0DFF, 0x0000, 0x06FF, 0x0000, 0x0000, 0x0FFF, 
    0x0000, 0x08FF, 0x01FF, 0x0000, 0x0AFF, 0x0000, 0x0000, 0x0FFF, 0x0CFF, 0x0000, 0x0000, 0x0FFF, 0x0000, 0x0FFF, 0x0FFF, 0x0FFF,
};

// encode 8 bits to 16 bits (2x hamming-8,4)
uint16_t enc8_16(uint8_t input) {
    return CODES[input & 0x0F]; //| (CODES[(input & 0xF0) >> 4] << 8);
}

// decode 16 bits to 8 bits (2x hamming-8,4)
uint16_t dec8_16(uint16_t input) {
    return DECODES[input & 0x00FF];
}

#endif // HAMMING_H